[
  {
    "url": "/blog/hello-world/",
    "title": "Hello World",
    "index": " quartafeira dia 12 agosto quando estava conversando com grande amigo Jo√£ Luiz entusiasmado framework nodejs que acab√°vamos fazer funcionar como foi sofrido reconfigur√°lo pois nem ele lembramos anotar passos ent√£ surgiu ideia anota√ß√µes sobre aprendemos facilitar encontrar essas informa√ß√µes depois isso blogResolvi bater aposta comigo mesmo em manter regularidade posts nesse blog escrevendo coisas tenho mais interesse: computadores web Ainda tem muito melhorar por aqui mas come√ß est√° bom"
  },
  {
    "url": "/blog/porque-voce-deveria-aprender-javascript/",
    "title": "Porque voc√™ deveria aprender JavaScript",
    "index": " web se tornou plataforma padr√£ desenvolvimento nos √∫ltimos anos Isso √© evidenciado pelo tanto ferramentas ambientes gr√°ficos plataformas sistemas operacionais que utilizam suas tecnologias apresentar conte√∫do Hoje at√© aplica√ß√µes dispositivos m√≥veis nativas incorporam do HTML CSS JavaScript Nem hardware tem escapado dessa mudan√ß Projetos como Arduino NodeBots Tessel vislumbram em futuro pr√≥ximo poderemos ter JavaScript linguagem comum embarcadosNo entanto ainda existe certa barreira aprender essa linguagem Ela j√° foi considerada brinquedo tinha somente fun√ß√£ criar alguns efeitos na interface usu√°rio adicionar alguma intera√ß√£ Hoje situa√ß√£ mudou aurora novo tempoEm meados 2004 Google lan√ß Gmail servi√ß mail ganhou destaque por garantir espa√ß quase ilimitado gratuitamente Alm disso caracter√≠stica interessante: partes da carregadas dinamicamente sem necessidade redirecionamento p√°gina inteira cliente Gmail desenvolvido utilizando AJAX ingl√™sAsynchronous Javascript And XML permitia troca informa√ß√µes com servidor forma ass√≠ncrona XMLHttpRequest seja AJAX conte√∫do fosse carregado acordo demanda usu√°rio recarregamento advento provocou mudan√ß profundas no aplica√ß√µes adicionando dinamismo interatividade permitindo fossem competitivas nativas tecnologia Na verdade muitas tecnologias cada florescendo conta pr√≥pria trabalhando juntas poderosa Jesse James Garrett J√° 2009 lan√ßamento Nodejs permitiu JavaScript aliado I/ bloqueante orientado eventos ganhasse lado das aplica√ß√µes ado√ß√£ muito r√°pida principalmente atender nova aplicativos mobile exigiam grandes quantidades respostas tempo real Dois anos mais tarde 2011 lan√ßado NPM gerenciador pacotes bibliotecas Node causando explos√£ popularidade Atualmente NPM reposit√≥rio maior quantidade m√≥dulos dispon√≠veisVantagensPerformanceNos navegadores modernos maioria dos c√≥digos executado bastante otimizada Apesar ser script isso utilizar m√°quina virtual execu√ß√£ possui desempenho √≥timo aplica√ß√µesMultiparadigma multiparadigma aumenta flexibilidade desenvolvimento Caso voc√™ queira trabalhar orienta√ß√£ √† objetos modelo heran√ß baseada prot√≥tipo √â poss√≠vel tambm conceitos encapsulamento polimorfismo composi√ß√£ simplesNo prefere abordagem funcional contm v√°rias caracter√≠sticas herdadas linguagens funcionais incluem: fun√ß√µes alta ordem closures Alguns mtodos cl√°ssicos est√£ presentes tais Array#map Array#filter Array#reduceReusabilidadeC√≥digo escrito port√°vel facilmente reus√°vel outros locais segue princ√≠pio forte retrocompatibilidade ent√£ bem pegar c√≥digo dez atr√°s execut√°lo sucesso qualquer recenteAlm possibilidade executar mesmo quanto servidores permite ganho produtividade imenso Outro facilidade disponibilidade terceiros utiliza√ß√£ NPMConclus√£Hoje Lei Atwood nunca pareceu t√£ verdadeira dominado todas √°reas desde sociais su√≠tes programas escrit√≥rio jogos grande processamento gr√°fico Qualquer aplica√ß√£ possa escrita eventualmente ser√° JavaScript Jeff Atwood Aprender pode lhe abrir oportunidades alm demais possuir habilidade invent√°rio"
  },
  {
    "url": "/blog/javascript-basico-1/",
    "title": "JavaScript B√°sico #1",
    "index": " JavaScript √© linguagem programa√ß√£ criada em 1995 com objetivo adicionar dinamicidade aos documentos HTML no navegador Netscape JavaScript junto CSS constituem tr√™s pilares tecnol√≥gicos da web permite que c√≥digo seja executado nos navegadores dos usu√°rios acessam p√°gina web adicionando interatividade permitindo constru√ß√£ aplica√ß√µes ricas script din√¢mica fun√ß√µes primeira classe suporta cria√ß√£ objetos baseados prot√≥tipos Por essas caracter√≠sticas considerada multiparadigma oferecendo suporte estilo imperativo orientado funcional Mas se preocupe entender todos esses conceitos por agora desenvolvida ambiente execu√ß√£ espec√≠ficoApesar ter nascimento navegadores atualmente habita tambm lado do servidor exemplo engine V8 utilizada Google Chrome mas utilizado pelo NodejsVoltando 1995 Netscape contrata Brendan Eich liderar desenvolvimento nova permitiria nov√≠ssimo Navegador √† Java tornasse mais acess√≠vel decide liguagem tipagem fraca seria ideal p√∫blico alvo √©poca No caso alguns webdesigners desejavam algumas funcionalidades p√°ginas web sem necessidade compilar bytecode conhecimento avan√ßado orienta√ß√£ objetosEssa foi chamada LiveScript rapidamente rebatizada erro levado time marketing assombraria muitos anos Em 4 Dezembro 1995 NetScape Sun anunciam como complemento Java ganhou vida pr√≥pria sendo cada vez controlar applets Java entanto sucesso curva aprendizagem baixa precisava compilador nem processo build IDE combinado falhas seguran√ß descobertas meses seguintes constru√≠ram imagem sria suficiente complexasMas passou despercebido pela Microsoft empresa tr√°s Internet Explorer Microsoft respondeu ao lan√ßando VBScript permitia intera√ß√£ componentes das sistema operacional Windows Alm disso 16 Julho 1996 lan√ß vers√£ Explorer 30 batiza JScriptNo entanto JScript totalmente compat√≠vel isso acirrou ainda disputa entre ambos navegadores comum desenvolvedores abandonassem outro invs escrever ambosEm Novembro 1997 iniciam padronizar ajuda European Computer Manufacturers Association (ECMA) d√£ ela novo nome: ECMAScript padroniza√ß√£ durou v√°rios ECMAScript 2 Junho 1998 3 1994 trabalhos na come√ßaram 2000Nos anos seguintes perdeu for√ß applets VBScript descontinuado batalha contra Navigator dom√≠nio 95% mercado in√≠cio 2000 fez tornase padr√£ facto din√¢micos Assim inicialmente participava ativamente padroniza√ß√£ eventualmente parou contribuir projeto arquivado per√≠odo indefinido hist√≥ria come√ß mudar 2004 quando Mozilla sucessora Netscape Firefox abocanha pequena significativa parte 2005 Mozilla juntase ECMA International come√ß trabalhar Macromedia desejava ActionScript Flash reviver 4Nos pr√≥ximos anos Chrome V8 utilizar tradu√ß√£ din√¢mica popularizouse diversas bibliotecas ferramentas ser disponibilizadas livre prometiam acabar incompatibilidade diversos tais JQuery MooTools Eventualmente chagouse consenso necess√°rio linguagem 2009 quinta definitiva finalmente lan√ßadaAtualmente considerado implementa√ß√£ ECMAScript assim JScript Entre 2009 2016 esfor√ß foram tomados melhorar aumentar capacidade 2015 sexta lan√ßada muitas novas funcionalidades tornandose definitivamente maduraSrie sobre JavaScriptPretendo iniciar essa srie artigos compartilhar pouco adquiri √∫ltimos pois acredito somente aprendese coisa verdade voc√™ ensinase ela Sei h√° muito conte√∫do qualidade basta pesquisada relevante dado l√≠ngua inglesa apresentam j√° obsoletos seja obst√°culo iniciantes aspirantes querem aprender poderosa linguagemNessa srie vou exibir aspectos prim√°rios poucos ir revelando detalhes importantes complexos conforme avan√ßamos Vou me esfor√ßar tratar assunto maneira f√°cil compreender importante tenha algum entendimento codifica√ß√£ l√≥gica programa√ß√£ Fa√ß sempre uso grande quantidade exemplos afinal melhor forma codificar codificando Talk is cheap show the code Linus Torvalds Quer come√ßar j√° Pois ent√£ vamos l√°! Caso esteja num atualizado aperte Ctrl + Shift J ver√° tela cursor Bem vindo Console navegador! Tente digitar seguinte express√£ abaixo Enter:var foo = Ol√° Mundo!Em seguida digite pr√≥xima novamente Enter:consolelog(foo)Viu resultado Parabns! Voc√™ atribui√ß√£ valor vari√°vel imprimiu resultado tela Simples Esse s√≥ exemplo b√°sico console lhe auxiliar nesse aprendizado ele companheiro ferramenta JavaScriptTente agora complexa escreva fun√ß√£ console Dica: for pular linha use Enter ap√≥s tudo Enterfunction fac (n) { if (n === 0) return 1 n * fac(n 1)}Ap√≥s isso execute comandos:fac(1)fac(2)fac(3)fac(6)Viu valores tela notou padr√£ Compreendeu faz üòÑLivrosJavaScript CatsEloquent JavaScriptLinksLearn EssentialsJavaScript: The Right WayHow to Learn ProperlyV√≠deosDesvendando JavaScriptCode School: Road Trip Part 1"
  },
  {
    "url": "/blog/javascript-basico-2/",
    "title": "JavaScript B√°sico #2",
    "index": "Valores elementos mais simples dentro linguagem: express√µes que podem ser reduzidas nenhuma outra seja est√£ em forma normal Por exemplo: 2 √© valor ele autocontido h√° como simplificar J√° (1+2) express√£ representa pois pode derivado reduzido 3Em l√≥gica matem√°tica objeto encontrase normal se este reescrito simplesTodo valor deve armazenado local na mem√≥ria do computador ocupa algum espa√ß bits JavaScript possui duas categorias valores: primitivos objetos Nesse artigo vamos focar nos valores tipo primitivo representam dados ter tipos:N√∫meroStringBooleanoExistem outros tipos avan√ßados mas introdu√ß√£ √† linguagem esses tr√™s suficientesN√∫meroValores n√∫mero surpreendentemente numricos armazena qualquer ponto flutuante precis√£ dupla cada utiliza 64 bits da armazenado Alguns utilizados identificar n√∫meros negativos tambm indicar fra√ß√£ decimal n√∫mero Na verdade maior numrico inteiro est√° pr√≥ximo aos 9 quadrilh√µesAbra console navegador Ctrl + Shift J experimente entrar com inteiros 0 3 16 apertado Enter ap√≥s deles Voc√™ ver sempre ir√° retornar voc√™ informada caso ela seja avaliada valor; contr√°rio retorna undefined preocupe entender significa isso por agora tratar sobre esse especial daqui pouco Computadores deuses Velho Testamento: muitas regras piedade Joseph Campbell The Power of Myth representar base decimal j√° visto basta escrev√™los sem usar zero esquerda N√∫meros fracionais escritos ponto ent√£ 15 escrito 15 omitir parte inteira quando nula assim 078 078 78; No entando recomendado adicione zero escrever muito grandes pequenos atravs nota√ß√£ cient√≠fica usando expoente 10 Veja abaixo diferentes formas mesmo n√∫mero:01 // ‚Üí 0101 011e1 01H√° possibilidade bases hexadecimal (16) octal (8) bin√°ria (2) hexadecimal adicionar 0x frente d√≠gitos 01234567890ABCDF octal precedese 0 seguida d√≠gito 01234567 isso 014 diferente 14 JavaScript primeiro indica segundo decimalN√∫meros bin√°rios 0b digitos 01 mostrar diferen√ß escrita 42 nas como:42 420b101010 42052 420x2a 42Opera√ß√µes matem√°ticas quatro opera√ß√µes aritmticas b√°sicas: adi√ß√£ subtra√ß√£ multiplica√ß√£ divis√£; dadas no pelos s√≠mbolos + * / respectivamente Esses chamados operadores utilizam dos direita esquerda realizar opera√ß√£ Outro operador importante m√≥dulo resto divis√£ % Experimente executar seguintes console1 4 59 / 10 093 (3 15( 42 20 5 )) 62510 % 1Como esperado divis√£ tem prioridade seguindo ordem preced√™ncia Caso precise explicita utilizar par√™ntesesValores numricos especiaisH√° comportam comuns primeiros infinitos positivo negativo representados linguagem Infinity Infinity apesar poderem aritmticas comparados √∫teis resolver alguns problemas terceiro NaN ingl√™s Not Number n√∫mero Opera√ß√µes indefinidas malformadas resultam veja exemplos:Infinity NaN0 NaNInfinity NaN NaNStringsStrings cadeia caracteres utilizadas texto escrito representa√ß√£ dada pelo conte√∫do par aspas duplas () () exemplo:√Ä noite vov√¥ Kowalsky v√™ √≠m√£ cair p√© pinguim queixoso vov√≥ p√µ √ß√∫car ch√° t√¢maras jabuti felizGazeta publica hoje jornal breve nota faxina quermesseQualquer caractere colocado entre encarrega atribuir elas entanto especiais indicam nova linha tabula√ß√£ precisam diferente utilizamos contrabarra ( character escaping) encontrada texto seguinte especial exemplo string contenha n quebra linha lista principais especiais:n Quebra linha Aspas duplas simples Contrabarrat Espa√ß tabula√ß√£ frase Usamos necess√°rio escrev√™la forma:Usamos n linhaStrings adicionadas divididas multiplicas subtra√≠das Mas concatenadas + ja va script produz resultado javascriptBooleanosMuitas vezes precisamos t√£ indiquem somente decis√£: ligado desligado ativo inativo outros booleanos exatamente true false homenagem ao matem√°tico George Boole grande contribuidor campos matem√°tica √°lgebra abstrata Apesar serem simples essenciais estamos lidando estruturas controle la√ß linguagemOpera√ß√µes booleanasValores operados operadores l√≥gicos nega√ß√£ respectivamente || ! Note nega√ß√£ ! un√°rio inverte booleano informado Exemplos:true truetrue false falsetrue truefalse false!true false!false trueCompara√ß√µes ordena√ß√£ total possuem ideia outro precede outro avaliar essa rela√ß√£ compara√ß√£ compara√ß√£ : que;= igual ;== ;= menor ; que;!= ;Alguns exemplos:1 = true1 1 false;(3 === 4) !== 12 3 falseAlvar Zoink trueJaiko &gt;= Jaik &gt; trueN√∫meros acordo real Strings comparadas pela lexicogr√°fica booleanos sucede ambos nunca iguais exce√ß√£ regra NaN maioria das mesmo NaN acontece Em == justificativa normalmente computa√ß√£ aritmtica indefinida inv√°lidaValores indefinidosH√° dois especiais null undefined falta pr√≥prio informa√ß√£ Muitas v√°lido produzem undefined obrigadas valor Contextualmente consider√°los sin√¥nimos vezesAlguns autores chegam afirmar acidente projeto linguagem Houve proposta unificar valores foi rejeitadaPodemos notar typeof fornece nomeando dado ela exemplo:typeof 32 numbertypeof stringtypeof (true true) booleantypeof objecttypeof undefinedConclus√£Esse ficou pouco longo acho entendimento inicial b√°sicas compreens√£ JavaScript pr√≥ximos artigos trataremos assuntos vari√°veis atribui√ß√µes suas especialidades"
  },
  {
    "url": "/blog/javascript-basico-3/",
    "title": "JavaScript B√°sico #3",
    "index": "No artigo anterior vemos como manipular basicamente valores tipo primitivo da linguagem entre : n√∫meros strings booleanos indefinidos Tambm vimos fazer algumas opera√ß√µes aritmticas compara√ß√£ express√µes entanto somente suficientes expressar algoritmos complexos √â necess√°rio utilizar mem√≥ria do computador armazenar computados acess√°los depois Nesse texto vamos ver atribuir nomear por meio uso vari√°veisva¬∑ri¬∑√°¬∑vel: (1) Em matem√°tica algo que pode assumir valor conjunto valores; (2) computa√ß√£ espa√ß reservado na computador capaz determinado dado alterarse durante execu√ß√£ programaVari√°veisTodo JavaScript precisa ser armazenado em local identificarmos tal utilizamos vari√°veis defini√ß√£ bem simples vari√°veis nomes locais onde armazenados representa√ß√£ √© ess√™ncia programa√ß√£ Fred Brooks The Mythical ManMonth definirmos vari√°vel palavra var seguida nome escolhido vari√°vel Vari√°veis podem ter qualquer nome com exce√ß√£ palavras reservadas exemplo reservada voc√™ dar vari√°vel var Outras reservadas incluem controles fluxo defini√ß√µes pr√≥prio JavaScript Nomes tambm conter espa√ß come√ßar mas n√∫meros depois primeiro caracter Alguns s√≠mbolos utilizados $ _ Por exemplo:var = 3var $b * aconsolelog(Valor : ) // ‚Üí Valor 3consolelog(Valor $b: $b) 9√â importante mente devem interpretadas ‚Äúcaixas‚Äù guardam valores ‚Äúplacas‚Äù apontam est√£ Assim placas mudar posi√ß√£ apontada isso reutilizar outros valores Veja abaixo:var tempo Solvar temperatura 22consolelog(Tempo agora: %s %d¬∞ tempo temperatura) Tempo Sol 22¬∞tempo Nubladotemperatura 2consolelog(Tempo Nublado 20¬∞Podemos mudamos Sol Nublado J√° temperatura 22 20 vez atribui√ß√£ Percebeu chave quando atribu√≠mos segundo valor Isso poss√≠vel porque j√° foi declarada s√≥ queremos ela declarar nova vari√°vel dentro string fun√ß√£ consolelog utilizadas interpola√ß√£ string Interpola√ß√£ tcnica substitui especiais passados Cada s√≠mbolo indica formata√ß√£ especial exemplo string enquanto %d n√∫meroAtalhos atribui√ß√£Muitas vezes mesma fornece recebe express√£ caso h√° alguns atalhos operador atribui√ß√£ diminuem quantidade escrita c√≥digo seguir:var += nuvenstemperatura = nuvens 20¬∞Na utilizando += executa concatena√ß√£ direita atribui resultado tempo Algo similar acontece = nesse faz subtra√ß√£ atribu√≠do temperatura Esses funcionam operadores aritmticos * / %Outros dois incremento (++) decremento () Ambos inteiros possuem comportamento simples: adicionam subtraem n√∫mero unidade atribuem pr√≥pria t1 22var t2 11t1++t2consolelog(Temperatura 1: t1) Temperatura 23¬∞consolelog(Temperatura 2: t2) 10¬∞Atribui√ß√µes ++ retornam valor ent√£ reescrever c√≥digo acima como:var 11consolelog(Temperatura t1++) 22¬∞consolelog(Temperatura t2) 11¬∞consolelog(Temperatura 10¬∞No atribui√ß√µes tem diferente dependendo colocados Quando precedem ap√≥s incremento/decremento; sucedam antes incremento/decremento Assim:var ++t1) t2) 10¬∞consolelog(Temperatura 10¬∞Atribui√ß√£ condicional√â var√°veis forma condicional tern√°rio possui sintaxe :[condi√ß√£] [valor verdadeiro] : falso]Vamos entender melhor exemplo Suponha queira exibir se n par √≠mpar verificar √≠mpar testar m√≥dulo zero ( seja sobra resto divis√£ dois) Se essa condi√ß√£ verdadeira atribuiremos par ao resultado Caso contr√°rio atribu√≠remos √≠mpar esse pequeno algoritmo poderia ser:var 11 n√∫merovar % 2 == 0 √≠mparconsolelog(resultado)Teste veja resultadosConclus√£Vari√°veis principal acesso √† que juntas fundamento dos dados algoritmo pr√≥ximo veremos declara√ß√µes controle execu√ß√£ condicionais repeti√ß√µes evoluirmos ainda mais nossa capacidade desenvolver c√≥digos JavaScript"
  },
  {
    "url": "/blog/introducao-ao-node.js/",
    "title": "Introdu√ß√£o ao Node.js",
    "index": " Nodejs popularmente conhecido apenas como Node √© ambiente execu√ß√£ JavaScript que acompanha navegador Node utiliza V8 motor execu√ß√£ mesmo utilizado pelo navegador Google Chrome tambm possui sistema gerenciador pacotes NPM contm alguns milhares m√≥dulos opensource dispon√≠veis em reposit√≥rioUtilizando mesmos princ√≠pios do JavaScript modelo concorr√™ncia baseado la√ß eventos roda thread √∫nica No entanto grande parte das opera√ß√µes podem bloquear por muito tempo implementadas forma ass√≠ncrona evitando c√≥digo bloqueie tempoConvencionalmente implementa√ß√µes servidores linguagens Java PHP utilizam estratgia criar cada conex√£ cria√ß√£ aloca√ß√£ mem√≥ria chega at√© megabytes Isso pode se tornar custoso medida n√∫mero conex√µes paralelas aumentaPragmaticamente quando Nodejs precisa executar opera√ß√£ entrada sa√≠da leituras arquivos rede banco dados entre outras ao invs fluxo resultado esteja dispon√≠vel ele escala fila tarefas volta ser executado estiver dispon√≠velEsse ass√≠ncrono permite seja capaz manipular v√°rios fluxos diferentes sem necessidade gerenciar threads paralelas tarefa √°rdua prop√≠cia bugsNo essa caracter√≠stica ass√≠ncrona parecer estranha desenvolvedores est√£ acostumados com ambientes fazem s√≠ncronas Ainda assim filosofia todas coisas chave sucesso Node Enquanto convencionais for√ßam manterem linha enquanto arquivos carregados no servidor requisi√ß√µes rede executadas despacha conex√£ recebida continua aceitar pr√≥ximas ass√≠ncronos trabalho tr√°s √∫nico adotar estratgia Outras plataformas compartilham similar caso Twisted Python Tornado linguagem Python alm da especifica√ß√£ Servlets 30 JavaInstalando NodejsVamos instalar atravs NVM terminal digite:curl https://rawgithubusercontentcom/nvmsh/nvm/v0352/installsh |Rodando comando acima ir√° fazer download script instala NVM execut√°lo Esse clona reposit√≥rio pasta tempor√°ria ~/nvm coloca vari√°veis algum arquivo perfil terminal (~/_profile ~/zshrc ~/profile ~/rc)Voc√™ verificar foi instalado utilizando commando abaixo:command v nvmSe tudo deu certo deve nvmVamos agora rodar √∫ltima vers√£ vel execute seguir:nvm install stableAp√≥s isso ative utilizandonvm use stableVoc√™ aprender mais sobre na p√°gina GitHub projeto instala√ß√£ digite abaixonode v pequeno exemplo exemplificar facilidade HTTP vamos minutos Vamos web server responde Hello World formato texto simples qualquer requisi√ß√£ Exemplo tirado oficialvar http = require(http)http createServer(function (req res) { reswriteHead(200 ContentType: text/plain }) resend(Hello Worldn) listen(1337 127001)consolelog(Servidor rodando http://127001:1337/) rodar salve nome exemplo examplejs execute seguinte forma:node examplejsVoc√™ receber mensagem Servidor http://127001:1337/ Com navegador barra endere√ß endere√ß http://127001:1337/ veja mensagemConclus√£ resolveu muitos problemas novas aplica√ß√µes mobile demandavam mas bala prata serve aplica√ß√£ Certos requerem solu√ß√µes difernetes funcionar bem √≥tima ferramenta ter invent√°rio"
  },
  {
    "url": "/blog/javascript-basico-4/",
    "title": "JavaScript B√°sico #4",
    "index": "No artigo anterior vimos como criar vari√°veis atribuir valores √† elas Tambm foi mostrado alguns atalhos atribui√ß√£ formas modificar das vari√°veis Nesse texto vamos aumentar nossa compreens√£ c√≥digos em JavaScript entender declara√ß√µes controle que linguagem possui¬∑cla¬∑ra¬∑√ß√£: (1) √ß√£ efeito declarar; (2) Afirma√ß√£ formal; (3) Asser√ß√£ expl√≠cita; partir agora nossos come√ßam ficar mais extensos contendo v√°rias linhas console dos navegadores √© adequado essas situa√ß√µes Salvar arquivos execut√°los no Nodejs boa op√ß√£ executar por exemplo arquivo chamado examplejs Node voc√™ pode acessar diret√≥rio do terminal digitar:node examplejsExpress√µes Declara√ß√µesExpress√µes c√≥digo produzem valor Como visto anteriormente utilizamos express√µes todo momento JavaScript: express√£ compara√ß√£ opera√ß√£ aritmtica entre outrasTodavia somente resolvem problemas precisamos lidar quando estamos codificando Por muitas vezes queremos fragmento seja executado dada condi√ß√£; ainda trecho m√∫ltiplas vezes isso fluxoDeclara√ß√µes fluxo tambm chamadas statements palavras chaves descrevem comportamento c√≥digo possui conjunto compacto podem ser combinadas adicionar complexidade Express√µes declara√ß√µes mas possuem diferen√ß sempre retornam valorDeclara√ß√£ bloco b√°sicas da defini√ß√£ bloco utilizada agrupar outras declara√ß√µes Todo bloco delimitado par {‚Ä¶}{ [declara√ß√£ 1] 2] 3] [‚Ä¶]}Importante: Diferente linguagens C Java JavaScript define escopo declaradas com var est√° intimamente ligado declara√ß√£ fun√ß√µes Vamos aprofundar assunto artigos futuros veja exemplo abaixo melhor:var = 0{ consolelog() // ‚Üí 0 var 1 1}consolelog() 1 vari√°vel oculta pela segunda mesmo nome Ambas mesma vari√°vel isso ap√≥s sa√≠da valor alterado dentro mantidoDeclara√ß√µes condicionais condicional fluxo executa dependendo condi√ß√£ booleana avaliadaCondicional √∫nica if ‚Ä¶ else tem executar pr√≥xima se avaliada true pareado else assim sucede for false Voc√™ encadear v√°rios if ser√£ testados cada vez Veja exemplo:if (condicao1) consolelog(Condi√ß√£ verdadeira)if (condicao2) { consolelog(Bloco declara√ß√µes) 2 verdadeira)} falsa)if (condicao3) 3 (condicao4) falsa 4 falsas)}Falsy TruthyNas condicionais express√£ true entanto tipo booleano coers√£ tipos trata especiais avalia false utilizados contexto booleano Esses chamados falsy :Valores indefinidos undefined null;N√∫meros NaN;String vazia Qualquer outro incluindo objetos avaliados truthy preciso aten√ß√£ especial primitivos inst√¢ncias Boolean abaixo:var p falsevar new Boolean(false)if (p) consolelog( falsa pois boolean)if () verdadeira c objeto)Condicional m√∫ltipla switch case poderosa complexa permite desenvolvedor escreva combine enumerado Se houver combina√ß√£ ativado seguem sintaxe resumida em:switch ([express√£]) { case [express√£o1]: [declara√ß√£] [express√£o2]: ‚Ä¶ default: [declara√ß√£]} mecanismo fallthrough seja combina valor todas pr√≥ximas executadas tambm temperatura 20switch (temperatura) 0: consolelog(Temperatura: graus) 20: 20 30: 30 default: acima graus)}var clima Nubladoswitch (clima) Sol: consolelog(Hoje dia sol) Nublado: cu nublado) Chuva: chuvoso) consolelog(Clima informado)}Podemos ver desse abaixo:Temperatura: grausTemperatura: grausHoje nubladoHoje chuvosoClima informado ao deparar primeiramente inicia cadeia busca r√≥tulos combinem condi√ß√£ Caso associadas ele executadas Alm disso fallthrough ativado Assim combinado executadas inclusive defaultCaso queira tenha efeito utilizar break for√ß switch utilizando condi√ß√µes:var break}var informado) break}Que vai ter esperado sa√≠da:Temperatura: nubladoPor utilidade default colocado final precisa necessariamente assim colateral colocar antes que ativar qualquer ser√° executada raramente desejadoDeclara√ß√µes la√ßDeclara√ß√µes la√ß utilizadas repetido H√° tr√™s principais for while while poss√≠vel dar esses la√ß localiz√°los atravs nome label continueLa√ß simples while la√ß enquanto false segue la√ß testada serem fazer infinitos nunca param basta trueVamos calcular 2102^{10}210 resultado 1var expoente 0while (expoente 10) * expoente++}consolelog(resultado) 1024La√ß do‚Ä¶while do‚Ä¶while parecido while: while ordem avalia√ß√£ rela√ß√£ declara√ß√£ Enquanto chega nem do‚Ä¶while executada menos vez indepentende La√ß infinitos feitos bastando trueUsando anterior 0do += 1} 10)consolelog(resultado) 1024La√ß completos for repete at√© Porm junto condi√ß√£ ela carrega duas declara√ß√µes: inicializa√ß√£ passo executado faz seguintes passos ordenadamente:Executa inicializa√ß√£Se true correspondente; sai sem passo;Executa passo volta item n√∫mero 2 normalmente iniciais √†s controle J√° passo indica qual ritmo deve ter Lembrese vazias infinitosVamos c√°lculo escrito for:var 1for (var 0; 10; 1) 2}consolelog(resultado) 1024Veja declarada na dado 1Declara√ß√µes r√≥tulo quebra fluxo cria√ß√£ identificam Qualquer rotulada porm esse recurso aninhados Dessa forma interromper execu√ß√£ aninhados espec√≠ficos forma declarativaDeclara√ß√µes r√≥tuloDeclara√ß√£ rotula√ß√£ marca posi√ß√£ mesmas regras nomes dados Dada sintaxe:[r√≥tulo]: [declara√ß√£]Quebra breakComo j√° switch interrompe atual Em caso la√ß atual pare imediatamente continue Podemos acompanhado interrompida primeira r√≥tulo simples:breakbreak [r√≥tulo]Quebra continue execu√ß√£ s√≥ utilizado la√ß itera√ß√£ nova novamente Quando r√≥tulo comportamento rotulado √©continuecontinue [r√≥tulo] modo ruim pouco eficiente exibir naturais menores 100 auxilia mostradosvar j 0lacoExterno: i ; (i &gt;= 100) lacoExterno (true) (j consolelog(j + i) j++ } }}Conclus√£Declara√ß√µes blocos constru√ß√£ linguagem Utilizar sequ√™ncia d√° novas maneiras permitindo interferir instru√ß√µes acordo condi√ß√µes desejar valores resultam declara√ß√µes"
  },
  {
    "url": "/blog/javascript-basico-5/",
    "title": "JavaScript B√°sico #5",
    "index": "Anteriormente aprendemos como controlar execu√ß√£ do fluxo c√≥digo JavaScript atravs declara√ß√µes Tambm vimos atribuir valores primitivos vari√°veis manipul√°los no c√≥digo Entretanto somente arranhamos superf√≠cie das funcionalidades que linguagem oferece Nessa publica√ß√£ vamos entender melhor sobre objetosPropriedadesTodo valor em exceto null undefined possui propriedades podem ser acessadas por chave meio operador Propriedades recebem nome objeto Veja exemplo abaixo:var str = javascriptstrlenght // ‚Üí 10var num 3numtoFixed function toFixed propriedade lenght armazena n√∫mero representa quantidade caracteres essa string possui seja comprimento da cadeia J√° toFixed √© refer√™ncia fun√ß√£ Em JavaScript fun√ß√µes tratadas isso atribu√≠das proprieades √â comum chamar mtodosObjetosAlm tipo primitivo tambm Objeto Objetos permitem agrupamento outros identificados chave ess√™ncia objetos arranjos associativos chamados mapas tabelas s√≠mbolos dicion√°rios onde cada √∫nica apontam valores &lt;img src=/images/20151015javascriptbasico5/objectsvg alt= objeto com apontando seus respectivos valores decoding=async loading=lazy /&gt; conjunto v√°rios pares chavevalor Cada aponta valor Declarando objetosEm normalmente declarados literal {‚Ä¶} contm chavevalor separadas v√≠rgulas Desde ECMAScript 2015 √∫ltima pode sucedida v√≠rgula chaves ter qualquer valor mas seguem mesmas regras nomes vari√°veisvar passaro { nome: Corru√≠ra nomeCientifico: Troglodytes musculus}Acessando propriedadesComo outro voc√™ acessar continua√ß√£ anterior:consolelog(passaronome) Corru√≠raconsolelog(passaronomeCientifico) Troglodytes musculusVoc√™ mesma forma feito vari√°veispassaronome BemtevipassaronomeCientifico Pitangus sulphuratusconsolelog(passaronome) Bemteviconsolelog(passaronomeCientifico) Pitangus sulphuratus√â poss√≠vel utilizar strings objetos Utilizar permite vantagem escrever segue dos identificadores vari√°veis come√ßando contendo espa√ß exemplo No entanto definidas possuem sintaxe pouco diferente veja Trincaferro nome cientifico: Saltator similis}H√° diferen√ß ao Nesses casos necess√°rio acesso [‚Ä¶] acessos anterior abaixo:consolelog(passaronome) Trincaferroconsolelog(passaro[nome]) Trincaferroconsolelog(passaro[nome cientifico]) Saltator similispassaronome Ticoticopassaro[nome cientifico] Zonotrichia capensisconsolelog(passaronome) Ticoticoconsolelog(passaro[nome]) Zonotrichia capensisconsolelog(passaro[nome similisAdicionando propriedadesPor serem associativos inser√ß√£ ap√≥s declara√ß√£ Assim podemos reescrever seguinte forma:var {} Objeto sem declaradaspassaronome Sabi√°laranjeirapassaro[nome Turdus rufiventrisconsolelog(passaro[nome]) Sabi√°laranjeiraconsolelog(passaro[nome Turdus rufiventrisVerificando exist√™ncia propriedadeQuando acessamos existe objeto recebemos resultado undefined Agora se undefined acess√°la resulta Verificar garantia exista objeto verificar utilizamos in retorna true caso esquerda false contr√°riovar corconsolelog(chave in passaro) falseconsolelog(passaro[chave]) undefinedpassarocor Amareloconsolelog(chave trueconsolelog(passaro[chave]) AmareloRemovendo propriedades delete remove objetoconsolelog(cor truedelete passarocorconsolelog(cor falseIterando for‚Ä¶in√â iterar todas declara√ß√£ for‚Ä¶in itera√ß√£ visitada pelo la√ß for‚Ä¶in itera enumer√°veis ordem arbitr√°ria Veja:var Patativa Sporophila leucoptera id: 1 extinct: false}for (var consolelog(Propriedade %s Tipo: %s chave typeof passaro[chave])} acima igual escrito abaixo diferente Propriedade extinct boolean cientifico string id number stringDiferen√ß entre objetosNo categorizados forma:Valores booleano n√∫mero undefined;Qualquer objeto grande modo comparados mutabilidade conte√∫dosCompara√ß√£ ‚Äúconte√∫do‚Äù dois tem mesmo conte√∫do iguaisvar tres 3consolelog(3 == 4) falseconsolelog(tres 3) trueconsolelog(xyz xyz) trueJ√° refer√™ncia identidade si mesmo conte√∫do considerados obj1 prop: 1 }var obj2 }obj1 falseobj1 trueobj1 Atribu√≠mos obj1obj1 trueMutabilidadeValores imut√°veis imposs√≠vel mudar esses tipos dados Toda vez manipula na verdade gera novos partir antigos sejam id√™nticosvar stringconsolelog(lenght) 6alenght 9consolelog(lenght) 6a outra stringconsolelog(lenght) 12Por lado mut√°veis Alterar adicionar remover novo antigo modificado quando atribu√≠mos objetos estamos indicando Se duas refer√™ncias diferentes direcionam alterar reflete mudan√ß todos ‚Äúapontam‚Äù elevar Patativa ave passaroconsolelog(avenome) Patativaavenome Patativadocampoconsolelog(passaronome) PatativadocampoConclus√£Objetos fornecem modos agrupar s√≥ conjunto estruturas dados mais b√°sicas JavaScript Quase todo elemento dentro objetoApesar possu√≠rem nome devem confundidos conceito programa√ß√£ orientada definido inst√¢ncia classe Como dito anteriormente Javascript din√¢micos maioria pessoas acredita ci√™ncia computa√ß√£ arte g√™nios Na realidade oposto muitas desenvolvendo coisas outras muro pequenas pedras Donald Knuth "
  },
  {
    "url": "/blog/javascript-basico-6/",
    "title": "JavaScript B√°sico #6",
    "index": "J√° vimos funcionamento objetos estruturas controle em JavaScript ambos conceitos essenciais aprendizagem da linguagem escrita algoritmos Agora vamos aprofundar nosso entendimento sobre unidade computa√ß√£ JavaScript: fun√ß√µes fun√ß√£ √© trecho c√≥digo que pode ser chamado por fluxo execu√ß√£ incluindo si mesma vari√°vel referencia Quando chamada argumentos passados como entrada retornar opcionalmente valor qualquerfun√ß√£: (1) alguma coisa faz usada ; (2) Em matem√°tica rela√ß√£ qual elemento conjunto associado exatamente outro conjunto (3) computa√ß√£ rotina resultadoFun√ß√µes extremamente √∫teis podem utilizadas reutiliza√ß√£ c√≥digo encapsulamento composi√ß√£ dados diversas linguagens programa√ß√£ No entanto modo fun√ß√µes tratadas JavaScript estranha maioria dos desenvolvedores Por isso importante ter bom trabalham voc√™ possa extrair m√°ximo linguagemDeclarando executando fun√ß√£ declarada com aux√≠lio palavrachave function seguido : nome fun√ß√£; lista par√¢metros entre par√™nteses separado v√≠rgulas ; declara√ß√µes definem essa par chaves {‚Ä¶}Por exemplo abaixo define chamada quadradofunction quadrado (numero) { return numero * numero} tem √∫nico par√¢metro definida √∫nica declara√ß√£ consiste do multiplicado ele mesmo Entretanto definir significa executar declarado Definir dar ser√° quando for requisitadoChamar realmente c√≥digo chamar utiliza entrada par√™nteses exemplo anterior podemos segue:quadrado(3)Nesta assume 3 executada resultado 9 retornado fun√ß√£ visualizar esse atribu√≠lo mostrar no consolevar resultado = quadrado(3)consolelog(resultado) // ‚Üí 9Valores primitivos caso valores tipo n√∫mero valor seja c√≥pia co passada ela chamada original argumento alterado Veja abaixo:function somaUm ++numero consolelog(numero dentro numero)}var 0consolelog(numero antes numero)somaUm(numero)consolelog(numero depois numero) sa√≠da desse ser√°:numero 0numero 1numero 0No refer√™ncia mesmo objeto passado Dessa forma mutar efeitos colaterais fora Veja:function ativar (cupom) cupomativo true}var cupom codigo: 000X ativo: false }consolelog(cupom %s %s cupomcodigo cupomativo)ativar(cupom)consolelog(cupom cupomativo) ser√°:cupom 000X falsecupom trueDevido caracter√≠sticas mais especificamente hoisting condicionalmente temos duas nome h√° conflito refer√™ncia isso causa erro poss√≠vel escrever abaixo:if (nota 7) () Reprovado }} else Aprovado }}consolelog( √©: + resultado())Aridade passagem argumentosDiferente muitas linguagens restringe quantidade receber dada aridade Supondo acima chamadas completamente v√°lidas JavaScript:function numero}consolelog(quadrado(2)) 4consolelog(quadrado(5 1 8)) 25consolelog(quadrado()) NaN oficialmente aceita argumento executamos passando fun√ß√£ ignora; Se passamos menos atribui undefined faltantes n√∫mero recebe denominada un√°ria; dois par√¢metros bin√°ria; tr√™s tern√°ria; assim diante Caso receba nul√°riaFun√ß√µes primeiraclasseFun√ß√µes primeira classe qualquer na linguagem Assim passadas retornadas Fun√ß√µes tambm serem atribu√≠das vari√°veisAlm disso toda propriedades mtodos associados Apesar typeof function sempre inst√¢ncia objeto numero}function informacoes (funcao) consolelog(typeof funcao) consolelog(funcao instanceof Object) Function) consolelog(funcaoname)}var funcao quadradoinformacoes(funcao) acima ter√° sa√≠dafunctiontruetruequadradoExpress√µes funcionaisEm declara√ß√£ retornada valor express√£ funcional Podemos atribuir potencia2 seguinte forma:var 4consolelog(potencia2(2)) 4 permite express√µes funcionais sejam an√¥nimas requerem definidas Mais vez reescrever nossa funcional:var numero}consolelog(quadrado(6)) 36Apesar muito semelhante utilizar funcional an√¥nima significado diferente interessante condicionamente das declaradas agora v√°lido JavaScript:var resultadoif resultado())Fun√ß√µes an√¥nimas frequentemente permitem coeso expressivo algumas refer√™ncias apenas lambdasFun√ß√µes alta ordemPor classe ordem ent√£ passar outra exemplo:function multipliquePor (n) (x) x n }}var dobro multipliquePor(2)var triplo multipliquePor(3)consolelog(dobro(6)) 12consolelog(dobro(9)) 18consolelog(triplo(3)) 9consolelog(triplo(4)) 12Note pega retorna nova ent√£ multiplica n criar fun√ß√µes dois chamamos dobro; tr√™s triplo Ao final alguns diferentes argumentosFun√ß√µes ordem principalmente desejamos codificar estilo pr√≥ximo paradigma Entender entender fundamentais closuresConclus√£ agradecimentosNesse epis√≥dio aprendemos declar√°las suas principais caracter√≠sticas utilizada tanto quanto √â fundamental compreender classeChegamos ao fim srie B√°sico mas conte√∫do funcionalidades Com visto at√© aqui j√° programas simples algoritmos JavaScript Gostaria agradecer amigo Guilherme minha amiga Mariana pela revis√£ textos permitiram melhor leitura blogPretendo lan√ßar outros falando aspectos profundos incrivelmente termos tcnicos tais processo hoisting closures opera√ß√µes bin√°rias outros Tambm quero programa√ß√£ orientado funcional"
  },
  {
    "url": "/blog/javascript-intermediario-1/",
    "title": "JavaScript Intermedi√°rio #1",
    "index": "Nessa publica√ß√£ vamos focar em dos aspectos que mais geram confus√£ entre desenvolvedores est√£ iniciando aprendizado JavaScript: escopo lxico vari√°veis Mas √© vari√°vel vari√°vel definida c√≥digo recebe identificador √∫nico nome utilizado quando queremos referenciar valor essa aponta trecho do qualquer identificada por definido como da vari√°vel Fora desse bloco indefinida outro identificado esse nomel√©¬∑xi¬∑co: (1) voc√°bulos l√≠ngua; (2) Voc√°bulos usados num dom√≠nio especializadoNa maioria das linguagens descendentes C pelo bloco ela foi declarada Lembrando sequ√™ncia declara√ß√µes par chaves {‚Ä¶} No JavaScript nem sempre quem define vari√°vel tudo depende forma com declaradaAntes ECMAScript 2015 s√≥ existia declarar vari√°veis: utilizando palavra chave var 2015 trouxe duas alternativas let const definem diferente tambm ditam mutabilidade declaradaDeclara√ß√£ vari√°veis varDeclara√ß√µes var fun√ß√£ seja fun√ß√£ local nome Essa abordagem bastante peculiar difere linguagens veja exemplo abaixo:var x = foobarconsolelog(x) // ‚Üí foobarfunction () { foo consolelog(x) foo for (var i 0; 1; i++) bar bar } bar}exemplo()consolelog(x) foobarNotase que apesar declarada dentro ser redeclarada novamente la√ß altera√ß√µes feitas no la√ß se mantm mesmo ap√≥s conclus√£ J√° fora exemplo alterado Podemos ver definiu x mas corpo Declara√ß√µes let declara√ß√£ adicionada ao permitir tenham assim ter comportamento semelhante C Java Veja anterior porm agora na vari√°veis:let (let foo}exemplo()consolelog(x) foobar diferen√ß resultados d√° principalmente onde delimita fun√ß√£Declara√ß√µes const padronizada declara porm refer√™ncia fixa const pode atribu√≠da declara√ß√£ abaixo:const 42const y name: }x 42 Erro!y Erro!√â importante mente poder dar ideia cria constante constante Por isso caso seja objeto voc√™ mut√°lo sem erro Veja:const }yname barconsolelog(y) {name: bar}y foobar Erro!Caso deseje construir objeto imut√°vel necess√°rio utilizar ObjectfreezeLinguagens servem somente expressar pensamentos possibilitar pensamentos quais existiriam fossem elasBertrand RusselConclus√£Como bom programador coisas importantes aprender manter simplicidade Quando estamos falando sobre c√≥digo podemos simplific√°lo utilizamos apenas conceitoAlgumas vezes tentados reutilizar representar dois conceitos diferentes pr√°tica deve evitada pois leva efetivo dif√≠cil leitura recomendo utiliza√ß√£ quanto estiver permita uso utilize ES6 Caso tenha precise reatribu√≠do fa√ß escolha padr√£ fica limpo declarativo reatribu√≠√ß√£ necess√°ria contadores acumuladores outros mecanismos loops let Tambm vai indicar utilizada declarada inteiraSiga princ√≠pio conceito torne leg√≠vel declarativo"
  },
  {
    "url": "/blog/javascript-intermediario-2/",
    "title": "JavaScript Intermedi√°rio #2",
    "index": " srie JavaScript Intermedi√°rio busca passar maneira s√≥lida gradual caracter√≠sticas fundamentais da linguagem Neste cap√≠tulo vamos voltar nossa aten√ß√£ importante esquecido quase mitol√≥gico aspecto linguagem: closures tambm conhecidas como fechos lxicos clausurasMesmo que voc√™ programe h√° muito tempo em nunca tenha ouvido falar aqui vai revela√ß√£: elas est√£ todo lugar Closure √© tipo op√ß√£ especial linguagem nem declara√ß√£ padr√£ desenvolvimento verdade closures existem apenas no JavaScript conceito bem mais amplo com base na teoria implementa√ß√£ linguanges programa√ß√£ Justamente por isso necess√°rio entend√™las se possa compreender todas consequ√™ncias utiliza√ß√£Contudo antes entender precisamos dar passo atr√°s linguagens programa√ß√£ executadas utilizam mem√≥ria do computador pilha execu√ß√£ grande maioria das utiliza estrutura registrar subrotinas ativas programa Essa normalmente implementada pilha tem v√°rias responsabilidades incluem: armazenar ponto execu√ß√£ atual endere√ß qual subrotina ativa deve retornar valor quando terminar execu√ß√£ vari√°veis locais entre outras forma geral podemos resumir funcionamento como:Toda chamada empilha novo quadro contexto;Quadros permanecem at√© fim subrotina;Quando termina desempilhado liberando pr√≥xima estiver vazia considerado programa chegou ao execu√ß√£ estouro (stack overflow) ocorre quadros quantidade dispon√≠vel permiteEm JavaScript consideramos fun√ß√µes subrotinas Veja c√≥digo abaixo contm tr√™s declara√ß√µes delas:function add (x y) { return x + y}function div / avg var sum = add(x div(sum 2)}consolelog(avg(4 5)) // ‚Üí 45 acima far√° tenha simplificada estados dado pela figura abaixo &lt;img src=/images/20160113javascriptintermediario2/stack1svg alt=Sequ√™ncia empilhamento dos acima decoding=async loading=lazy /&gt;Temos fun√ß√£ respectivo contendo par√¢metros 4 y 5; partir ponto chama add vez contexto 5;Ao executar retorna 9 vari√°vel avg; ent√£ div contexto 2; termina an√¥nima representada ~; resultado escopo global ~ impressa consoleAgora ver outro exemplo pouco complexo Considere abaixo:function mul (x) function (y) * }}var double mul(2)consolelog(double(2)) 4 desse ter√° seguintes pilha: src=/images/20160113javascriptintermediario2/stack2svg par√¢metro 2;Ao refer√™ncia an√¥nima # global; global double 2;Mas espere √≠‚Ä¶ concluir apontada precisa x pertencia mul No entanto j√° foi desempilhado porque finalizada Onde parar xBem senhoras senhores lhes apresento closure Muito prazer!ClosuresClosures nada armazenam lxico interno possam ser utilizadas mesmo existe mais closure acontece declarada dentro outra alm disso interior referencia locais exterior Quando exterior executada criada refer√™ncias quaisquer necessitaClosures capazes ‚Äúlembrar‚Äù pertencente onde foram declaradas fora Dessa forma redesenhar nosso esquema simplificado estado contemplando heap: src=/images/20160113javascriptintermediario2/stack3svg pega 2 salvo multiplica pelo 2 multiplica√ß√£ retornado exibido consoleTeoria propriedades closures consegue implementar modelo gerenciar mem√≥ria Em tais linguagens automaticamente desalocadas execu√ß√£ Entretanto requer capturadas sobrevivam original Por essas precisam alocadas sejam necess√°rias utilizando din√¢mica comumente heap invs vida dessas controlado perman√ßam acess√≠veis enquanto houver alguma referencieIsso explica suportam acompanham coletor lixo Alternativas uso lixo gerenciamento seria controle manual continuar usando espa√ß closure mas ambas estratgias podem ter comportamento indefinido acontecer ‚Äúrefer√™ncias selvagens‚Äù Problema Funarg descreve essa dificuldade alta ordem progra√ß√£ baseada pilha C C++√â importante lembrar imune interfer√™ncia externa pr√≥pria Isso garante √°rea oculta pode √∫til representar privado Alm serem objetos identificadas refer√™ncia apontem mesma fun√ß√£ Vide anterior temos:function mul(2)var triple mul(3)consolelog(double(6)) 12consolelog(triple(4)) 12consolelog(double == triple) falseConclus√£ utilize potencial m√°ximo fundamental closures √â criar encapsulamento dados programar orientado eventos simples declarativa daqueles conceitos curiosos paradoxalmente dif√≠ceis ub√≠quos demais toda parte Mas programador torne apto utiliz√°lo favor solu√ß√µes concisas desenvolvidas conclus√µes chegamos objeto primitivo programa√ß√£; constru√≠do meio valores algumas boas velhas express√µes lambdasGuy L Steele"
  },
  {
    "url": "/blog/javascript-intermediario-3/",
    "title": "JavaScript Intermedi√°rio #3",
    "index": "Nesse texto vamos compreender pouco mais sobre paradigma importante quando estamos programando em JavaScript alm disso entender das principais caracter√≠sticas que levaram ao sucesso da linguagem: modelo concorr√™ncia¬∑sin¬∑cro¬∑nis¬∑mo: 1 Qualidade estado ass√≠ncrono; 2 Aus√™ncia concorr√™ncia no tempoAssincronia JavaScriptPrograma√ß√£ ass√≠ncrona √© programa√ß√£ onde c√≥digo pode seguir fluxo execu√ß√£ ‚Äúpadr√£‚Äù Alm ass√≠ncrono tratar interrup√ß√µes externas programa tais como chegada evento sinal temporizador entre outrasEm JavaScript podemos escrever forma f√°cil utilizando fun√ß√£ setTimeout recebe dois par√¢metros: ser executada quantidade milissegundos indica tempo espera iniciar dessa fun√ß√£ Veja exemplo abaixo:function foo () { setTimeout(function consolelog(without one) } 1000) consolelog(fully dressed) 0) consolelog(You know)}consolelog(Smile my dear!)foo()consolelog(you are not) sa√≠da do acima ser√° escrita como:Smile dear!You knowyou notfully dressedwithout oneApesar dos logs serem colocados fora ordem alguns foram fun√ß√µes passadas setTimeout ser√£ executadas somente ap√≥s for esgotado Vamos ver outro complexo Considere asyncCountTo (x) (var i = 0; x; i++) consolelog(i) (x i) * }}asyncCountTo(4)Qual acima Temos la√ß dispara v√°rias por meio imprimem vari√°vel i Por maior seja surpresa exibe sa√≠da:4444Por qu√™ raz√£ desse comportamento se deve √† closure associada passada setTimeout compartilhada todas closures isso tem esse comportamento continua sendo executado incrementada at√© chegue valor quatro condi√ß√£ falha S√≥ ent√£ callbacks executadosCaso voc√™ tenha familiaridade com closures essa publica√ß√£ blog lhe ajudarNo entanto percebeu mesmo zero imediatamente Bem aqui frente efeitos entrar detalhes partir agoraPrograma√ß√£ Orientada Eventos linguagem foi inicialmente desenvolvida adicionar funcionalidades p√°ginas HTML navegador Netscape √â multiparadigma suporta procedural orientada objetos funcional mas especialmente atender eventosCaso queira saber hist√≥ria linguagem leia outra blog eventos ajusta programa acordo eventos seja podem feitas qualquer momento necessitam ‚Äúrea√ß√µes‚Äù parte programa muito utilizado desenvolvimento drivers sensores microcontroladores tambm predomina aplica√ß√µes GUI pois requerem aplica√ß√£ reaja intera√ß√£ usu√°rio coincid√™ncia ela seria utilizada ‚Äú quer algumas HTML‚Äù certoEm normalmente temos La√ß Eventos comumente chamado event loop aguarda acontecerem chamar designadas responder evento espec√≠fico qual detalhar daqui diante Event Loop JavaScriptToda m√°quina possui √∫nico captura disparados pelo usu√°rio ambiente est√° alocada Se capturado possuir algum callback associado ocorrer tarefa enfileirada na fila tarefas ir√° motor JavaScript tarefas chamada job queue estrutura armazena refer√™ncia devem executadas geral algoritmo bastante simples:Aguarde ter tarefas;Execute primeira fim isto √© pilha esteja vaziaRetorne passo 1Na verdade vimos anteriormente ‚Äúexecuta tempo‚Äù adiciona sinal temporizador disparado segunto par√¢metro Existem outras formas fila elas:Adicionar listeners addEventListener;Utilizando setInterval postMessage;Respostas requisi√ß√µes HTTP APIs XMLHttpRequest fetch navegadores preemptivo poss√≠vel interromper corrente retornar posteriormente Somente vez vez computa√ß√£ iniciada interrompida Assim h√° paralelismo loop Preemptividade capacidade sistema temporariamente sem exigir coopera√ß√£ inten√ß√£ retomar posteriormente√â isso que colocado imediatamente Ainda necess√°rio terminar atual ent√£ executado Isso explica comportamendo anterior Na realidade garante vai per√≠odo mas enfileiradaOutro efeito colateral alguma demanda muita computa√ß√£ inevitavelmente bloquear assim nenhuma poder√° iniciada bloqueada √ß√µes respondidos adequado GUI apresenta estar ‚Äútravada‚Äù exemploIndo almAgora j√° entende concorr√™ncia questionamentos perambulando pela cabe√ß:Mas fazemos requisi√ß√£ API fetch ainda capaz interagir tela demore v√°rios segundos conclu√≠da‚Ä¶ Como acontece bloqueadoDiferentes m√°quinas virtuais implementam fluxos paralelos tempo Normalmente est√£ relacionadas opera√ß√µes entrada comumente ‚Äúlentas‚Äù Alguns exemplos paralelamente incluem: leitura arquivos rede stream multim√≠dia acesso banco dados outrosEssa apresentou vers√£ simplificada funciona pontos deixados lado bem sanidade explica√ß√£ No acredito conseguido funcionamento compreendido consequ√™ncias surgem uso Caso interesse vis√£ completa recomendo ler sobre: microtarefas promises; instancia√ß√£ loops Workers; etapas apresenta√ß√£ nos navegadores"
  },
  {
    "url": "/blog/javascript-intermediario-4/",
    "title": "JavaScript Intermedi√°rio #4",
    "index": "Hoje veremos caracter√≠stica bastante peculiar do JavaScript que normalmente √© causa pequenos erros quanto estamos trabalhando com linguagem: hasteamento vari√°veis comumente chamado hoisting has¬∑te¬∑ar: (1) Elevar prender ao topo haste (2) Altear i√ßar levantarHasteamento vari√°veisNo momento execu√ß√£ c√≥digo JavaScript toda declara√ß√£ vari√°vel passam por processo hasteamento isto √© da elevada escopo atribu√≠do forma autom√°tica Esse hoisting conceito pode ser pouco confuso princ√≠pio ent√£ vamos exemplo pr√°tico Em poss√≠vel declarar fun√ß√£ cham√°la logo em seguida como no abaixo:function hello (name) { consolelog(Hello + name !)}hello(Max) // ‚Üí Hello Max!Entretanto voc√™ tambm chamar ainda foi declarada seja acima reescrito abaixo assim continua funcionando:hello(Max) Max!function !)}Isso acontece porque hasteada c√≥digo compilador faz esse autom√°tica isso funcionando normalmente mesmo vari√°veis declaradas var Veja:consolelog(x) undefinedvar x = 6consolelog(x) 6 erro aconteceu entanto primeira sa√≠da undefined se declarada valor 6 Bem isso mecanismo hoisting somente eleva declara√ß√µes das mas atribu√≠√ß√µes inicializam tem comportamento equivalente abaixo:var xconsolelog(x) undefinedx 6Declara√ß√µes locais pelo processo xconsolelog(x)x 1foo()consolelog(x)function foo () consolelog(x) var 2 consolelog(x)}Ser√° igual :undefinedundefined21No aplicado utilizam let const permite refer√™ncia ir√° lan√ßar tipo ReferenceErrorConclus√£Podemos resumir essa publica√ß√£ como: declara√ß√£ defini√ß√£; enquanto fun√ß√µes tanto quando defini√ß√£Ainda assim pelos exemplos anteriores hastear podem levar resultados confusos proporcionar dif√≠cil leitura √â importante siga algumas boas pr√°ticas escrita suas respectivo evita confus√£ hoisting pois deixa expl√≠citoOutra pr√°tica inicializa√ß√£ na sempre poss√≠vel Dessa forma evitase valores indefinidos durante surpresas indesejadas"
  },
  {
    "url": "/blog/javascript-intermediario-5/",
    "title": "JavaScript Intermedi√°rio #5",
    "index": "Hoje iremos abordar IIFE pr√°tica muito utilizada no JavaScript quando estamos desenvolvendo aplica√ß√µes m√≥dulos na linguagem j√° que ela garante c√≥digo cause seja afetado por efeitos colaterais externosIntrodu√ß√£ entender precisamos relembrar express√µes funcionais closures em JavaScriptFun√ß√µes tratadas como qualquer outro valor JavaScript isso podem ser atribu√≠das vari√°veis passadas par√¢metro retornadas resultado Toda vez express√£ resulta fun√ß√£ dizemos temos funcional declara√ß√£ fun√ß√£ utilizando palavrachave function sempre retorna refer√™ncia definida tambm √© considerada vari√°vel pode executar referencia par par√™nteses (‚Ä¶) entre par√¢metros da fun√ß√£Caso voc√™ queira ler mais sobre comportamento recomendo leitura dessa publica√ß√£ blogAlm disso toda internamente escopo outra alm vari√°veis locais externa; closure closure armazena lxico externa capaz acess√°lo mesmo execu√ß√£ tenha sido finalizada estado privado nada tem acesso esse exceto outras fun√ß√µes definidas closureSe quiser melhor closures essa do blog lhe ajudar Padr√£ IIFECom conceitos relembrados introdu√ß√£ podemos criar IIFE IIFE funcional executada imediatamente ap√≥s definida Normalmente (do ingl√™s ImmediatelyInvoked Function Expression) escrita defini√ß√£ consequente seguida imediata execu√ß√£ Voc√™ utilizar padr√£ palavra chave seguinte forma:(function () { // })()Veja primeiro externos definindo logo seguida segundo externos invocandoVamos aplicar exemplo pr√°tico Suponha queremos definir contador global √∫nico somente acess√≠vel via tr√™s fun√ß√µes: read atual contador; count incrementa reset reinicializa contador poderia implementar solu√ß√£ tal abaixo:var state = 0function read return state}function + 1 0 state}count()count()consolelog(read()) ‚Üí 2reset()consolelog(read()) 0Apesar state contador √∫nica possui problemas: est√° dispon√≠vel todo subrotina globalmente Alm ‚Äúpolui‚Äù c√≥digo levar conflito nomes bugs dif√≠ceis serem encontradosPodemos proteger Vamos ent√£ refatorar acima pr√°tica:var counter (function var read: } count: reset: } }})()countercount()countercount()consolelog(counterread()) 2counterreset()consolelog(counterread()) 0Agora acima protegida forma nenhuma reset tenhamos essas fun√ß√µes retorno objeto contm refer√™ncias acessam state Por isso utiliza√ß√£ delas pouco modificada refatora√ß√£ final encontrado pelo nome SEAF SelfExecuting Anonymous Function) No entanto termo introduzido Ben Alman considerado semanticamente adequado Afinal requer an√¥nimasConclus√µes polui√ß√£ vari√°veis permite aliviar confus√£ escopos bloco/fun√ß√£ dados mecanismo hasteamento JavaScriptOutra comum constru√ß√£ encapsulado utilizadas pelas ficam alocadas possuem elas vimos exemplo post hoje ficou curto mas lembrese IIFEs das poucas alternativas simula√ß√£ √©poca anterior ao ES2015 √â bom ter conhecimento invent√°rio"
  },
  {
    "url": "/about/",
    "title": "Sobre",
    "index": "Ol√° nome √© Max Naegeler Roecker Mestre em Ci√™ncia da Computa√ß√£ Bacharel pela Universidade Estadual Maring√° (UEM) Tcnico Inform√°tica Tecnol√≥gica Federal do Paran√° (UTFPR)Tenho grande interesse por tecnologia principalmente nas √°reas computa√ß√£ Web Desenhista hobby apaixonado bom peda√ß carne Acredito na liberdade individualidade raz√£ como principais meios alcan√ßar felicidade &lt;img src=/images/symbol1svg alt=√Åguia Coroada title=Si vis pacem bellum decoding=async loading=lazy /&gt;"
  },
  {
    "url": "/blog/",
    "title": "√öltimas publica√ß√µes",
    "index": ""
  },
  {
    "url": "/",
    "title": "",
    "index": ""
  },
  {
    "url": "/now/",
    "title": "Now",
    "index": "Essa √© minha p√°gina /now integrante do movimento /now page criado por Derek Sivers informa√ß√£ sobre que desenvolvendo trabalhando no presente momentoTrabalhando na Objective Solutions como Desenvolvedor Software;Trabalhando Departamento Inform√°tica da Universidade Estadual Maring√° Professor Assistente;Tentando publicar textos interessantes din√¢micos Web com intuito compartilhar persistir conhecimento meio blog &lt;img src=/images/symbol2svg alt=Jovem mulher em p√© tartaruga title=Subrepunt prospera fata decoding=async loading=lazy /&gt;"
  },
  {
    "url": "/tags/post/",
    "title": "Publica√ß√µes",
    "index": ""
  }]
