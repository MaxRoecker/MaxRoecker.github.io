[
  {
    "url": "/blog/hello-world/",
    "title": "Hello World",
    "index": " quartafeira dia 12 agosto quando estava conversando com grande amigo Jo√£ Luiz entusiasmado framework nodejs que acab√°vamos fazer funcionar como foi sofrido reconfigur√°lo pois nem ele lembramos anotar passos ent√£ surgiu ideia anota√ß√µes sobre aprendemos facilitar encontrar essas informa√ß√µes depois isso blogResolvi bater aposta comigo mesmo em manter regularidade posts nesse blog escrevendo coisas tenho mais interesse: computadores web Ainda tem muito melhorar por aqui mas come√ß est√° bom"
  },
  {
    "url": "/blog/porque-voce-deveria-aprender-javascript/",
    "title": "Porque voc√™ deveria aprender JavaScript",
    "index": " web se tornou plataforma padr√£ desenvolvimento nos √∫ltimos anos Isso √© evidenciado pelo tanto ferramentas ambientes gr√°ficos plataformas sistemas operacionais que utilizam suas tecnologias apresentar conte√∫do Hoje at√© aplica√ß√µes dispositivos m√≥veis nativas incorporam do HTML CSS JavaScript Nem hardware tem escapado dessa mudan√ß Projetos como Arduino NodeBots Tessel vislumbram em futuro pr√≥ximo poderemos ter JavaScript linguagem comum embarcadosNo entanto ainda existe certa barreira aprender essa linguagem Ela j√° foi considerada brinquedo tinha somente fun√ß√£ criar alguns efeitos na interface usu√°rio adicionar alguma intera√ß√£ Hoje situa√ß√£ mudou aurora novo tempoEm meados 2004 Google lan√ß Gmail servi√ß mail ganhou destaque por garantir espa√ß quase ilimitado gratuitamente Alm disso caracter√≠stica interessante: partes da carregadas dinamicamente sem necessidade redirecionamento p√°gina inteira cliente Gmail desenvolvido utilizando AJAX ingl√™sAsynchronous Javascript And XML permitia troca informa√ß√µes com servidor forma ass√≠ncrona XMLHttpRequest seja AJAX conte√∫do fosse carregado acordo demanda usu√°rio recarregamento advento provocou mudan√ß profundas no aplica√ß√µes adicionando dinamismo interatividade permitindo fossem competitivas nativas tecnologia Na verdade muitas tecnologias cada florescendo conta pr√≥pria trabalhando juntas poderosa Jesse James Garrett J√° 2009 lan√ßamento Nodejs permitiu JavaScript aliado I/ bloqueante orientado eventos ganhasse lado das aplica√ß√µes ado√ß√£ muito r√°pida principalmente atender nova aplicativos mobile exigiam grandes quantidades respostas tempo real Dois anos mais tarde 2011 lan√ßado NPM gerenciador pacotes bibliotecas Node causando explos√£ popularidade Atualmente NPM reposit√≥rio maior quantidade m√≥dulos dispon√≠veisVantagensPerformanceNos navegadores modernos maioria dos c√≥digos executado bastante otimizada Apesar ser script isso utilizar m√°quina virtual execu√ß√£ possui desempenho √≥timo aplica√ß√µesMultiparadigma multiparadigma aumenta flexibilidade desenvolvimento Caso voc√™ queira trabalhar orienta√ß√£ √† objetos modelo heran√ß baseada prot√≥tipo √â poss√≠vel tambm conceitos encapsulamento polimorfismo composi√ß√£ simplesNo prefere abordagem funcional contm v√°rias caracter√≠sticas herdadas linguagens funcionais incluem: fun√ß√µes alta ordem closures Alguns mtodos cl√°ssicos est√£ presentes tais Array#map Array#filter Array#reduceReusabilidadeC√≥digo escrito port√°vel facilmente reus√°vel outros locais segue princ√≠pio forte retrocompatibilidade ent√£ bem pegar c√≥digo dez atr√°s execut√°lo sucesso qualquer recenteAlm possibilidade executar mesmo quanto servidores permite ganho produtividade imenso Outro facilidade disponibilidade terceiros utiliza√ß√£ NPMConclus√£Hoje Lei Atwood nunca pareceu t√£ verdadeira dominado todas √°reas desde sociais su√≠tes office baseadas nuvem nuvem jogos grande processamento gr√°fico Qualquer aplica√ß√£ possa escrita eventualmente ser√° JavaScript Jeff Atwood Aprender pode lhe abrir oportunidades alm demais possuir habilidade invent√°rio"
  },
  {
    "url": "/blog/javascript-basico-1/",
    "title": "JavaScript B√°sico #1",
    "index": " JavaScript √© linguagem programa√ß√£ criada em 1995 com objetivo adicionar dinamicidade aos documentos HTML no navegador Netscape JavaScript junto CSS constituem tr√™s pilares tecnol√≥gicos da web permite que c√≥digo seja executado nos navegadores dos usu√°rios acessam p√°gina web adicionando interatividade permitindo constru√ß√£ aplica√ß√µes ricas script din√¢mica fun√ß√µes primeira classe suporta cria√ß√£ objetos baseados prot√≥tipos Por essas caracter√≠sticas considerada multiparadigma oferecendo suporte estilo imperativo orientado funcional Mas se preocupe entender todos esses conceitos por agora desenvolvida ambiente execu√ß√£ espec√≠ficoApesar ter nascimento navegadores atualmente habita tambm lado do servidor exemplo engine V8 utilizada Google Chrome mas utilizado pelo NodejsVoltando 1995 Netscape contrata Brendan Eich liderar desenvolvimento nova permitiria nov√≠ssimo Navegador √† Java tornasse mais acess√≠vel decide liguagem tipagem fraca seria ideal p√∫blico alvo √©poca No caso alguns webdesigners desejavam algumas funcionalidades p√°ginas web sem necessidade compilar bytecode conhecimento avan√ßado orienta√ß√£ objetosEssa foi chamada LiveScript rapidamente rebatizada erro levado time marketing assombraria muitos anos Em 4 Dezembro 1995 NetScape Sun anunciam como complemento Java ganhou vida pr√≥pria sendo cada vez controlar applets Java entanto sucesso curva aprendizagem baixa precisava compilador nem processo build IDE combinado falhas seguran√ß descobertas meses seguintes constru√≠ram imagem sria suficiente complexasMas passou despercebido pela Microsoft empresa tr√°s Internet Explorer Microsoft respondeu ao lan√ßando VBScript permitia intera√ß√£ componentes das sistema operacional Windows Alm disso 16 Julho 1996 lan√ß vers√£ Explorer 30 batiza JScriptNo entanto JScript totalmente compat√≠vel isso acirrou ainda disputa entre ambos navegadores comum desenvolvedores abandonassem outro invs escrever ambosEm Novembro 1997 iniciam padronizar ajuda European Computer Manufacturers Association (ECMA) d√£ ela novo nome: ECMAScript padroniza√ß√£ durou v√°rios ECMAScript 2 Junho 1998 3 1994 trabalhos na come√ßaram 2000Nos anos seguintes perdeu for√ß applets VBScript descontinuado batalha contra Navigator dom√≠nio 95% mercado in√≠cio 2000 fez tornase padr√£ facto din√¢micos Assim inicialmente participava ativamente padroniza√ß√£ eventualmente parou contribuir projeto arquivado per√≠odo indefinido hist√≥ria come√ß mudar 2004 quando Mozilla sucessora Netscape Firefox abocanha pequena significativa parte 2005 Mozilla juntase ECMA International come√ß trabalhar Macromedia desejava ActionScript Flash reviver 4Nos pr√≥ximos anos Chrome V8 utilizar tradu√ß√£ din√¢mica popularizouse diversas bibliotecas ferramentas ser disponibilizadas livre prometiam acabar incompatibilidade diversos tais JQuery MooTools Eventualmente chagouse consenso necess√°rio linguagem 2009 quinta definitiva finalmente lan√ßadaAtualmente considerado implementa√ß√£ ECMAScript assim JScript Entre 2009 2016 esfor√ß foram tomados melhorar aumentar capacidade 2015 sexta lan√ßada muitas novas funcionalidades tornandose definitivamente maduraSrie sobre JavaScriptPretendo iniciar essa srie artigos compartilhar pouco adquiri √∫ltimos pois acredito somente aprendese coisa verdade voc√™ ensinase ela Sei h√° muito conte√∫do qualidade basta pesquisada relevante dado l√≠ngua inglesa apresentam j√° obsoletos seja obst√°culo iniciantes aspirantes querem aprender poderosa linguagemNessa srie vou exibir aspectos prim√°rios poucos ir revelando detalhes importantes complexos conforme avan√ßamos Vou me esfor√ßar tratar assunto maneira f√°cil compreender importante tenha algum entendimento codifica√ß√£ l√≥gica programa√ß√£ Fa√ß sempre uso grande quantidade exemplos afinal melhor forma codificar codificando Talk is cheap show the code Linus Torvalds Quer come√ßar j√° Pois ent√£ vamos l√°! Caso esteja num atualizado aperte Ctrl + Shift J ver√° tela cursor Bem vindo Console navegador! Tente digitar seguinte express√£ abaixo Enter:var foo = Ol√° Mundo!Em seguida digite pr√≥xima novamente Enter:consolelog(foo)Viu resultado Parabns! Voc√™ atribui√ß√£ valor vari√°vel imprimiu resultado tela Simples Esse s√≥ exemplo b√°sico console lhe auxiliar nesse aprendizado ele companheiro ferramenta JavaScriptTente agora complexa escreva fun√ß√£ console Dica: for pular linha use Enter ap√≥s tudo Enterfunction fac (n) { if (n === 0) return 1 n * fac(n 1)}Ap√≥s isso execute comandos:fac(1)fac(2)fac(3)fac(6)Viu valores tela notou padr√£ Compreendeu faz üòÑLivrosJavaScript CatsEloquent JavaScriptLinksLearn EssentialsJavaScript: The Right WayHow to Learn ProperlyV√≠deosDesvendando JavaScriptCode School: Road Trip Part 1"
  },
  {
    "url": "/blog/javascript-basico-2/",
    "title": "JavaScript B√°sico #2",
    "index": "Valores elementos mais simples dentro linguagem: express√µes que podem ser reduzidas nenhuma outra seja est√£ em forma normal Por exemplo: 2 √© valor ele autocontido h√° como simplificar J√° (1+2) express√£ representa pois pode derivado reduzido 3Em l√≥gica matem√°tica objeto encontrase normal se este reescrito simplesTodo valor deve armazenado local na mem√≥ria do computador ocupa algum espa√ß bits JavaScript possui duas categorias valores: primitivos objetos Nesse artigo vamos focar nos valores tipo primitivo representam dados ter tipos:N√∫meroStringBooleanoExistem outros tipos avan√ßados mas introdu√ß√£ √† linguagem esses tr√™s suficientesN√∫meroValores n√∫mero surpreendentemente numricos armazena qualquer ponto flutuante precis√£ dupla cada utiliza 64 bits da armazenado Alguns utilizados identificar n√∫meros negativos tambm indicar fra√ß√£ decimal n√∫mero Na verdade maior numrico inteiro est√° pr√≥ximo aos 9 quadrilh√µesAbra console navegador Ctrl + Shift J experimente entrar com inteiros 0 3 16 apertado Enter ap√≥s deles Voc√™ ver sempre ir√° retornar voc√™ informada caso ela seja avaliada valor; contr√°rio retorna undefined preocupe entender significa isso por agora tratar sobre esse especial daqui pouco Computadores deuses Velho Testamento: muitas regras piedade Joseph Campbell The Power of Myth representar base decimal j√° visto basta escrev√™los sem usar zero esquerda N√∫meros fracionais escritos ponto ent√£ 15 escrito 15 omitir parte inteira quando nula assim 078 078 78; No entando recomendado adicione zero escrever muito grandes pequenos atravs nota√ß√£ cient√≠fica usando expoente 10 Veja abaixo diferentes formas mesmo n√∫mero:01 // ‚Üí 0101 011e1 01H√° possibilidade bases hexadecimal (16) octal (8) bin√°ria (2) hexadecimal adicionar 0x frente d√≠gitos 01234567890ABCDF octal precedese 0 seguida d√≠gito 01234567 isso 014 diferente 14 JavaScript primeiro indica segundo decimalN√∫meros bin√°rios 0b digitos 01 mostrar diferen√ß escrita 42 nas como:42 420b101010 42052 420x2a 42Opera√ß√µes matem√°ticas quatro opera√ß√µes aritmticas b√°sicas: adi√ß√£ subtra√ß√£ multiplica√ß√£ divis√£; dadas no pelos s√≠mbolos + * / respectivamente Esses chamados operadores utilizam dos direita esquerda realizar opera√ß√£ Outro operador importante m√≥dulo resto divis√£ % Experimente executar seguintes console1 4 59 / 10 093 (3 15( 42 20 5 )) 62510 % 1Como esperado divis√£ tem prioridade seguindo ordem preced√™ncia Caso precise explicita utilizar par√™ntesesValores numricos especiaisH√° comportam comuns primeiros infinitos positivo negativo representados linguagem Infinity Infinity apesar poderem aritmticas comparados √∫teis resolver alguns problemas terceiro NaN ingl√™s Not Number n√∫mero Opera√ß√µes indefinidas malformadas resultam veja exemplos:Infinity NaN0 NaNInfinity NaN NaNStringsStrings cadeia caracteres utilizadas texto escrito representa√ß√£ dada pelo conte√∫do par aspas duplas () () exemplo:√Ä noite vov√¥ Kowalsky v√™ √≠m√£ cair p√© pinguim queixoso vov√≥ p√µ √ß√∫car ch√° t√¢maras jabuti felizGazeta publica hoje jornal breve nota faxina quermesseQualquer caractere colocado entre encarrega atribuir elas entanto especiais indicam nova linha tabula√ß√£ precisam diferente utilizamos contrabarra ( character escaping) encontrada texto seguinte especial exemplo string contenha n quebra linha lista principais especiais:n Quebra linha Aspas duplas simples Contrabarrat Espa√ß tabula√ß√£ frase Usamos necess√°rio escrev√™la forma:Usamos n linhaStrings adicionadas divididas multiplicas subtra√≠das Mas concatenadas + ja va script produz resultado javascriptBooleanosMuitas vezes precisamos t√£ indiquem somente decis√£: ligado desligado ativo inativo outros booleanos exatamente true false homenagem ao matem√°tico George Boole grande contribuidor campos matem√°tica √°lgebra abstrata Apesar serem simples essenciais estamos lidando estruturas controle la√ß linguagemOpera√ß√µes booleanasValores operados operadores l√≥gicos nega√ß√£ respectivamente || ! Note nega√ß√£ ! un√°rio inverte booleano informado Exemplos:true truetrue false falsetrue truefalse false!true false!false trueCompara√ß√µes ordena√ß√£ total possuem ideia outro precede outro avaliar essa rela√ß√£ compara√ß√£ compara√ß√£ : que;= igual ;== ;= menor ; que;!= ;Alguns exemplos:1 = true1 1 false;(3 === 4) !== 12 3 falseAlvar Zoink trueJaiko &gt;= Jaik &gt; trueN√∫meros acordo real Strings comparadas pela lexicogr√°fica booleanos sucede ambos nunca iguais exce√ß√£ regra NaN maioria das mesmo NaN acontece Em == justificativa normalmente computa√ß√£ aritmtica indefinida inv√°lidaValores indefinidosH√° dois especiais null undefined falta pr√≥prio informa√ß√£ Muitas v√°lido produzem undefined obrigadas valor Contextualmente consider√°los sin√¥nimos vezesAlguns autores chegam afirmar acidente projeto linguagem Houve proposta unificar valores foi rejeitadaPodemos notar typeof fornece nomeando dado ela exemplo:typeof 32 numbertypeof stringtypeof (true true) booleantypeof objecttypeof undefinedConclus√£Esse ficou pouco longo acho entendimento inicial b√°sicas compreens√£ JavaScript pr√≥ximos artigos trataremos assuntos vari√°veis atribui√ß√µes suas especialidades"
  },
  {
    "url": "/blog/javascript-basico-3/",
    "title": "JavaScript B√°sico #3",
    "index": "No artigo anterior vemos como manipular basicamente valores tipo primitivo da linguagem entre : n√∫meros strings booleanos indefinidos Tambm vimos fazer algumas opera√ß√µes aritmticas compara√ß√£ express√µes entanto quando estamos programando somente suficientes expressar algoritmos complexos √â necess√°rio utilizar mem√≥ria do computador referenciar previamente computados Nesse texto vamos ver atribuir nomear por meio uso vari√°veisvari√°vel: 1 Sujeito varia√ß√£; 2 Que pode ser variado mudado; 3 InconstanteVari√°veisTodo valor JavaScript precisa armazenado em local na computador identificarmos onde armazenarmos utilizamos vari√°veis Em defini√ß√£ bem simples vari√°veis nomes locais armazenados falar verdade tambm valores Mas que indicam endere√ß outros computador seja voc√™ precisar valor chama pelo ‚Äúnome‚Äù vari√°vel ela indica est√° simplificar nossa vida todo esse processo acontece atribuindo nome ao valor Simples representa√ß√£ √© ess√™ncia programa√ß√£ Fred Brooks The Mythical ManMonth definirmos palavra var seguida deseja dar vari√°vel Vari√°veis podem ter qualquer nome com exce√ß√£ palavras reservadas exemplo reservada vari√°vel var Outras reservadas incluem controles fluxo defini√ß√µes pr√≥prio JavaScript Nomes conter espa√ß come√ßar mas n√∫meros depois primeiro caracter Alguns s√≠mbolos utilizados $ _ Voc√™ atribui √† atravs = Quando atribu√≠mos dizemos aponta Por exemplo:var = 3var $b * aconsolelog(Valor : ) // ‚Üí Valor 3consolelog(Valor $b: $b) 9√â importante mente devem interpretadas caixas guardam valores placas apontam est√£ Assim placas redirecionar isso reutilizar Veja abaixo:var tempo Solvar temperatura 22consolelog(Tempo agora: %s %d¬∞ tempo temperatura) Tempo Sol 22¬∞tempo Nubladotemperatura 2consolelog(Tempo Nublado 20¬∞Podemos mudamos assim alterar si mesma dentro string fun√ß√£ consolelog utilizadas interpola√ß√£ string Interpola√ß√£ strings tcnica elas substituem s√≠mbolo das dadas sequ√™ncia exemplo string enquanto %d n√∫mero colocamos temperatura Percebeu segundo valor Isso poss√≠vel porque j√° foi declarada s√≥ queremos elaAtalhos atribui√ß√£Muitas vezes mesma fornece recebe express√£ caso h√° alguns atalhos operador atribui√ß√£ diminuem quantidade escrita c√≥digo seguir:var += nuvenstemperatura = nuvens 20¬∞Na utilizando += executa concatena√ß√£ direita resultado tempo Algo similar = nesse faz subtra√ß√£ atribu√≠do Esses funcionam operadores aritmticos * / % apesar serem menos utilizadosOutros dois incremento (++) decremento () Ambos inteiros possuem comportamento simples: adicionam subtraem n√∫mero unidade atribuem pr√≥pria t1 22var t2 11t1++t2consolelog(Temperatura 1: t1) Temperatura 23¬∞consolelog(Temperatura 2: t2) 10¬∞Atribui√ß√µes ++ retornam ent√£ reescrever c√≥digo acima como:var 11consolelog(Temperatura t1++) 22¬∞consolelog(Temperatura t2) 11¬∞consolelog(Temperatura 10¬∞No entanto atribui√ß√µes tem diferente dependendo posi√ß√£ colocados precedem ap√≥s incremento/decremento; sucedam antes incremento/decremento Assim:var ++t1) t2) 10¬∞consolelog(Temperatura 10¬∞Atribui√ß√£ condicional√â var√°veis forma condicional tern√°rio possui sintaxe :[condi√ß√£] [valor verdadeiro] : falso]Vamos entender melhor exemplo Suponha queira exibir se n par √≠mpar verificar √≠mpar testar m√≥dulo zero ( sobra resto divis√£ dois) Se essa condi√ß√£ verdadeira atribuiremos resultado Caso contr√°rio atribu√≠remos pequeno algoritmo poderia ser:var 11 n√∫merovar 2 == 0 par √≠mparconsolelog(resultado)Teste nConclus√£Vari√°veis principal acesso que juntas fundamento execu√ß√£ dos dados algoritmo pr√≥ximo veremos declara√ß√µes controle execu√ß√£ condicionais repeti√ß√µes evoluirmos ainda mais capacidade desenvolver c√≥digos JavaScript"
  },
  {
    "url": "/blog/introducao-ao-node.js/",
    "title": "Introdu√ß√£o ao Node.js",
    "index": " Nodejs popularmente conhecido apenas como Node √© ambiente execu√ß√£ JavaScript que acompanha navegador Node utiliza V8 motor execu√ß√£ mesmo utilizado pelo navegador Google Chrome tambm possui sistema gerenciador pacotes NPM contm alguns milhares m√≥dulos opensource dispon√≠veis em reposit√≥rioUtilizando mesmos princ√≠pios do JavaScript modelo concorr√™ncia baseado la√ß eventos roda thread √∫nica No entanto grande parte das opera√ß√µes podem bloquear por muito tempo implementadas forma ass√≠ncrona evitando c√≥digo bloqueie tempoConvencionalmente implementa√ß√µes servidores linguagens Java PHP utilizam estratgia criar cada conex√£ cria√ß√£ aloca√ß√£ mem√≥ria chega at√© megabytes Isso pode se tornar custoso medida n√∫mero conex√µes paralelas aumentaPragmaticamente quando Nodejs precisa executar opera√ß√£ entrada sa√≠da leituras arquivos rede banco dados entre outras ao invs fluxo resultado esteja dispon√≠vel ele escala fila tarefas volta ser executado estiver dispon√≠velEsse ass√≠ncrono permite seja capaz manipular v√°rios fluxos diferentes sem necessidade gerenciar threads paralelas tarefa √°rdua prop√≠cia bugsNo essa caracter√≠stica ass√≠ncrona parecer estranha desenvolvedores est√£ acostumados com ambientes fazem s√≠ncronas Ainda assim filosofia todas coisas chave sucesso Node Enquanto convencionais for√ßam manterem linha enquanto arquivos carregados no servidor requisi√ß√µes rede executadas despacha conex√£ recebida continua aceitar pr√≥ximas ass√≠ncronos trabalho tr√°s √∫nico adotar estratgia Outras plataformas compartilham similar caso Twisted Python Tornado linguagem Python alm da especifica√ß√£ Servlets 30 JavaInstalando NodejsVamos instalar atravs NVM terminal digite:curl https://rawgithubusercontentcom/nvmsh/nvm/v0352/installsh |Rodando comando acima ir√° fazer download script instala NVM execut√°lo Esse clona reposit√≥rio pasta tempor√°ria ~/nvm coloca vari√°veis algum arquivo perfil terminal (~/_profile ~/zshrc ~/profile ~/rc)Voc√™ verificar foi instalado utilizando commando abaixo:command v nvmSe tudo deu certo deve nvmVamos agora rodar √∫ltima vers√£ vel execute seguir:nvm install stableAp√≥s isso ative utilizandonvm use stableVoc√™ aprender mais sobre na p√°gina GitHub projeto instala√ß√£ digite abaixonode v pequeno exemplo exemplificar facilidade HTTP vamos minutos Vamos web server responde Hello World formato texto simples qualquer requisi√ß√£ Exemplo tirado oficialvar http = require(http)http createServer(function (req res) { reswriteHead(200 ContentType: text/plain }) resend(Hello Worldn) listen(1337 127001)consolelog(Servidor rodando http://127001:1337/) rodar salve nome exemplo examplejs execute seguinte forma:node examplejsVoc√™ receber mensagem Servidor http://127001:1337/ Com navegador barra endere√ß endere√ß http://127001:1337/ veja mensagemConclus√£ resolveu muitos problemas novas aplica√ß√µes mobile demandavam mas bala prata serve aplica√ß√£ Certos requerem solu√ß√µes difernetes funcionar bem √≥tima ferramenta ter invent√°rio"
  },
  {
    "url": "/blog/javascript-basico-4/",
    "title": "JavaScript B√°sico #4",
    "index": "No artigo anterior vimos como criar vari√°veis atribuir valores √† elas Tambm foi mostrado alguns atalhos atribui√ß√£ formas modificar das vari√°veis Nesse texto vamos aumentar nossa compreens√£ c√≥digos em JavaScript entender declara√ß√µes controle que linguagem possuiclara√ß√£: 1 √ß√£ efeito declarar; 2 Afirma√ß√£ formal; 3 Asser√ß√£ expl√≠cita partir agora nossos come√ßam ficar mais extensos contendo v√°rias linhas console dos navegadores √© adequado essas situa√ß√µes Salvar arquivos execut√°los no Nodejs boa op√ß√£ executar por exemplo arquivo chamado examplejs Node voc√™ pode acessar diret√≥rio do terminal digitar:node examplejsExpress√µes Declara√ß√µesExpress√µes c√≥digo produzem valor Como visto anteriormente utilizamos express√µes todo momento JavaScript: express√£ compara√ß√£ opera√ß√£ aritmtica express√£ at√© mesmo pr√≥prio valor primitivo express√£ podem ser aninhadas √†s outras complexidadeTodavia somente resolvem problemas precisamos lidar quando estamos codificando Por muitas vezes queremos fragmento seja executado dada condi√ß√£; ainda trecho m√∫ltiplas vezes isso fluxoDeclara√ß√µes fluxo tambm chamadas statements r√≥tulos s√≠mbolos especiais descrevem comportamento c√≥digo possui conjunto compacto especialmente fluxo utilizadas incorporar expressividade vistas anteriormente declara√ß√µes com diferencial retornarem valorDeclara√ß√£ bloco b√°sicas da defini√ß√£ bloco utilizada agrupar outras declara√ß√µes Todo bloco delimitado par chaves {}{ [declara√ß√£ 1] 2] 3] [‚Ä¶]}Importante: Diferente linguagens C Java JavaScript define escopo declaradas var est√° intimamente ligado declara√ß√£ fun√ß√µes aprofundar assunto artigos futuros Veja exemplo:var = 0{ consolelog() // ‚Üí 0 var 1 1}consolelog() 1Declara√ß√µes condicionais condicional executa dependendo condi√ß√£ avaliadaCondicional √∫nica if ‚Ä¶ else tem executar pr√≥xima se avaliada true acompanhado else assim sucede for false exemplo:if (condicao1) consolelog(Condi√ß√£ verdadeira)if (condicao2) { consolelog(Bloco declara√ß√µes) 2 verdadeira)} falsa)if (condicao3) 3 (condicao4) falsa 4 falsas)}Falsy TruthyNas condicionais precisa true false mas necessariamente tipo booleano coers√£ tipos trata avalia false utilizados contexto Esses chamados falsy :Valores indefinidos undefined null;N√∫meros NaN;String vazia Qualquer outro incluindo objetos avaliados truty preciso aten√ß√£ especial primitivos inst√¢ncias Boolean exemplo abaixo:var p falsevar new Boolean(false)if (p) consolelog( falsa pois boolean)if () verdadeira c objeto)Condicional m√∫ltipla switch case poderosa complexa permite desenvolvedor escreva teste resultado algum rotulado Se houver combina√ß√£ programa associadas ele sintaxe resumida em:switch ([express√£]) { case [valor1]: [declara√ß√£] [valor2]: ‚Ä¶ default: [declara√ß√£]} mecanismo fallthrough seja combina valor todas pr√≥ximas executadas tambm temperatura 20switch (temperatura) 0: consolelog(Temperatura: graus) 20: 20 30: 30 default: acima graus)}var clima Nubladoswitch (clima) Sol: consolelog(Hoje dia sol) Nublado: cu nublado) Chuva: chuvoso) consolelog(Clima informado)}Podemos ver sa√≠da desse abaixo:Temperatura: grausTemperatura: grausHoje nubladoHoje chuvosoClima informado ao deparar primeiramente inicia cadeia busca combinem condi√ß√£ Caso ele executadas Alm disso fallthrough ativado Assim abaixo combinado executadas inclusive defaultCaso queira tenha efeito utilizar break for√ß switch utilizando cada condi√ß√µes:var break}var informado) break}Que vai ter esperado sa√≠da:Temperatura: nubladoPor utilidade default sempre colocado final assim colateral colocar antes que ativar qualquer ser√° executada raramente desejadoDeclara√ß√µes la√ßDeclara√ß√µes la√ß repetido H√° tr√™s principais for while while poss√≠vel dar esses la√ß localizalos atravs nome label continueLa√ß simples while la√ß enquanto √©:while ([condi√ß√£]) [declara√ß√£]Se eventualmente ap√≥s testada serem Vamos calcular 2102^{10}210 veja 1var expoente 0while (expoente 10) * expoente++}consolelog(resultado) 1024 fazer infinitos nunca param basta trueLa√ß do‚Ä¶while do‚Ä¶while parecido while: booleana true diferente:do [declara√ß√£]while ([condi√ß√£]) diferen√ß entre while depois execu√ß√£ declara√ß√£ Enquanto chega nem do‚Ä¶while executada menos vezUsando anterior 0do += 1} 10)consolelog(resultado) 1024La√ß infinitos feitos bastando trueLa√ß completos for repete Porm junto condi√ß√£ ela carrega duas declara√ß√µes: inicializa√ß√£ passo Tem parecida Java C:for ([inicializa√ß√£]; [condi√ß√£]; [passo]) [declara√ß√£] executado faz seguintes passos ordenadamente:Executa inicializa√ß√£Se correspondente; sai sem passo;Executa passo; normalmente iniciais controle J√° passo indica qual ritmo deve ter Lembrese passo vazias infinitosVamos c√°lculo escrito for:var 1for (var 0; 10; expoente++) 2}consolelog(resultado) 1024Veja vari√°vel declarada na dado 1Declara√ß√µes r√≥tulo quebra fluxo cria√ß√£ identificam declara√ß√£Qualquer rotulada interrompida porm esse recurso aninhados Dessa forma interromper aninhados espec√≠ficos forma declarativaDeclara√ß√µes r√≥tuloDeclara√ß√£ rotula√ß√£ marca posi√ß√£ segue mesmas regras nomes dados Dada pela sintaxe:[r√≥tulo]: [declara√ß√£]Quebra breakComo j√° switch interrompe atual Em caso la√ß atual pare imediatamente continue la√ß Podemos primeira r√≥tulo simples:breakbreak [r√≥tulo]Quebra continue execu√ß√£ s√≥ utilizado la√ß itera√ß√£ nova novamente executado Quando r√≥tulo comportamento √©continuecontinue [r√≥tulo] modo ruim pouco eficiente exibir naturais menores 100 auxilia mostradosvar j 0lacoExterno: i ; (i &gt;= 100) lacoExterno (true) (j consolelog(j + i) j++ } }}Conclus√£Declara√ß√µes blocos constru√ß√£ linguagem Utilizar sequ√™ncia d√° novas maneiras permitindo interferir instru√ß√µes acordo condi√ß√µes desejar valores resultam declara√ß√µes elaborar algoritmos codificar programas escrev√™los JavaScript"
  },
  {
    "url": "/blog/javascript-basico-5/",
    "title": "JavaScript B√°sico #5",
    "index": "Anteriormente aprendemos como controlar execu√ß√£ do fluxo c√≥digo JavaScript atravs declara√ß√µes Tambm vimos atribuir valores primitivos vari√°veis manipul√°los no c√≥digo Com isso √© poss√≠vel codificar qualquer algoritmo em JavaScript Entretanto ainda arranhamos superf√≠cie das funcionalidades que linguagem oferecePropriedadesTodo valor exceto null undefined possui propriedades podem ser acessados por chave Essas operador Veja exemplo abaixo:var str = javascriptstrlenght // ‚Üí 10var num 3numtoFixed function toFixed propriedade lenght armazena n√∫mero representa quantidade caracteres essa string possui seja comprimento da cadeia J√° toFixed refer√™ncia fun√ß√£ Em JavaScript fun√ß√£ tratadas atribu√≠das proprieades √â comum chamar fun√ß√µes mtodosObjetosAlm tipo primitivo tambm Objeto Objetos permitem agrupamento outros identificados meio ess√™ncia objetos arranjos associativos chamados mapas tabelas s√≠mbolos dicion√°rios onde cada chave √∫nica apontam valores &lt;img src=/images/20151015javascriptbasico5/objectsvg alt= objeto com apontando seus respectivos valores /&gt; conjunto v√°rios pares chavevalor Cada direciona valor Declarando objetosEm normalmente declarados literal {‚Ä¶} sintaxe dada como:{ [chave1]: [valor1] [chave2]: [valor2] ‚Ä¶}Podese perceber chavevalor separadas v√≠rgulas Desde ECMAScript 2015 √∫ltima pode sucedida v√≠rgulavar passaro { nome: Corru√≠ra nomeCientifico: Troglodytes musculus}Acessando propriedadesComo outro valor voc√™ acessar continua√ß√£ anterior:consolelog(passaronome) Corru√≠raconsolelog(passaronomeCientifico) Troglodytes musculusVoc√™ mesma forma feito vari√°veispassaronome BemtevipassaronomeCientifico Pitangus sulphuratusconsolelog(passaronome) Bemteviconsolelog(passaronomeCientifico) Pitangus sulphuratus√â utilizar strings objetos Utilizar permite vantagem escrever chaves nome segue regras dos identificadores vari√°veis ter come√ßando contendo espa√ß exemplo No entanto definidas possuem pouco diferente veja Trincaferro nome cientifico: Saltator similis}H√° diferen√ß ao Nesses casos necess√°rio acesso [‚Ä¶] acessos anterior abaixo:consolelog(passaronome) Trincaferroconsolelog(passaro[nome]) Trincaferroconsolelog(passaro[nome cientifico]) Saltator similispassaronome Ticoticopassaro[nome cientifico] Zonotrichia capensisconsolelog(passaronome) Ticoticoconsolelog(passaro[nome]) Zonotrichia capensisconsolelog(passaro[nome similisAdicionando propriedadesPor serem associativos inser√ß√£ ap√≥s declara√ß√£ Assim podemos reescrever seguinte forma:var {} Objeto vaziopassaronome Sabi√°laranjeirapassaro[nome Turdus rufiventrisconsolelog(passaro[nome]) Sabi√°laranjeiraconsolelog(passaro[nome Turdus rufiventrisVerificando exist√™ncia propriedadeQuando lemos existe objeto acess√°la resulta undefined Agora se undefined Utilizamos in verificar retorna true caso esquerda exista false contr√°riovar corconsolelog(chave passaro) falseconsolelog(passaro[chave]) undefinedpassarocor Amareloconsolelog(chave trueconsolelog(passaro[chave]) AmareloRemovendo propriedades delete remove objetoconsolelog(cor truedelete passarocorconsolelog(cor falseIterando sobre for‚Ä¶in√â iterar todas declara√ß√£ for‚Ä¶in Possui sintaxe:for ([chave] [objeto]) [declara√ß√£] itera√ß√£ visitada pelo la√ß for‚Ä¶in itera enumer√°veis ordem arbitr√°ria Assim:var Patativa Sporophila leucoptera id: 1 extinct: false}for (var consolelog(Propriedade %s Tipo: %s chave typeof passaro[chave])} resultado acima escrito abaixo difernete Propriedade extinct boolean cientifico string id number stringDiferen√ß entre objetosObjetos diferem alguns pontos:Valores booleano n√∫mero undefined;Qualquer objeto grande modo comparados mutabilidade conte√∫dosCompara√ß√£ ‚Äúconte√∫do‚Äù dois tem mesmo conte√∫do iguaisvar tres 3consolelog(3 == 4) falseconsolelog(tres 3) trueconsolelog(xyz xyz) trueJ√° refer√™ncia identidade somente igual si mesmo conte√∫do considerados obj1 prop: 1 }var obj2 }obj1 falseobj1 trueobj1 Atribu√≠mos obj1obj1 trueMutabilidadeValores imut√°veis imposs√≠vel mudar esses tipos dados Toda vez manipula na verdade gera novos partir antigos sejam id√™nticosvar stringconsolelog(lenght) 6alenght 9consolelog(lenght) 6a outra stringconsolelog(lenght) 12Por lado mut√°veis Alterar adicionar remover novo antigo modificado quando atribu√≠mos objetos estamos indicando objeto Se duas refer√™ncias diferentes direcionam alterar reflete mudan√ß todos ‚Äúapontam‚Äù elevar Patativa ave passaroconsolelog(avenome) Patativaavenome Patativadocampoconsolelog(passaronome) PatativadocampoConclus√£Objetos fornecem modos agrupar s√≥ conjunto Conceitualmente colocar alguma rela√ß√£ invs deix√°los espalhados estrutura dados mais b√°sicas Quase todo elemento dentro objetoApesar possu√≠rem nome devem confundidos conceito programa√ß√£ orientada definido inst√¢ncia classe Como dito anteriormente Javascript din√¢micos maioria pessoas acredita ci√™ncia computa√ß√£ arte g√™nios Na realidade oposto muitas desenvolvendo coisas outras muro pequenas pedras Donald Knuth "
  },
  {
    "url": "/about/",
    "title": "Sobre",
    "index": "Ol√° nome √© Max Naegeler Roecker Mestre em Ci√™ncia da Computa√ß√£ Bacharel pela Universidade Estadual Maring√° (UEM) Tcnico Inform√°tica Tecnol√≥gica Federal do Paran√° (UTFPR)Tenho grande interesse por tecnologia principalmente nas √°reas computa√ß√£ Web Desenhista hobby apaixonado bom peda√ß carne Acredito na liberdade individualidade raz√£ como principais meios alcan√ßar felicidade No gods no kings Knowledge is power and power freedom "
  },
  {
    "url": "/blog/",
    "title": "√öltimas publica√ß√µes",
    "index": ""
  },
  {
    "url": "/",
    "title": "",
    "index": ""
  },
  {
    "url": "/now/",
    "title": "Now",
    "index": "Essa √© minha p√°gina /now integrante do movimento /now page criado por Derek Sivers informa√ß√£ sobre que desenvolvendo trabalhando no presente momentoTrabalhando na Objective Solutions como Desenvolvedor Software;Tentando publicar textos interessantes din√¢micos Web com intuito compartilhar persistir conhecimento meio blog"
  },
  {
    "url": "/tags/post/",
    "title": "Publica√ß√µes",
    "index": ""
  }]
